[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "investment-mcp"
version = "4.0.0"
description = "Professional Investment MCP System - AI-powered portfolio optimization for Swedish markets"
readme = "README.md"
requires-python = ">=3.9"
license = {file = "LICENSE"}
authors = [
    {name = "Investment MCP Team", email = "team@investment-mcp.com"},
]
keywords = ["investment", "portfolio", "optimization", "swedish", "ai", "mcp"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Financial and Insurance Industry",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Office/Business :: Financial :: Investment",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    # Web Framework
    "fastapi>=0.104.1",
    "uvicorn[standard]>=0.24.0",
    "python-multipart>=0.0.6",
    
    # Data Validation
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    
    # Database
    "sqlalchemy>=2.0.23",
    "alembic>=1.13.0",
    "psycopg2-binary>=2.9.9",
    "asyncpg>=0.29.0",
    
    # Cache
    "redis>=5.0.1",
    "aioredis>=2.0.1",
    
    # HTTP Clients
    "httpx>=0.25.2",
    "aiohttp>=3.9.1",
    "requests>=2.31.0",
    
    # Data Processing
    "pandas>=2.1.4",
    "numpy>=1.25.2",
    "scipy>=1.11.4",
    
    # Financial Data
    "yfinance>=0.2.28",
    "quantlib>=1.32",
    
    # Technical Analysis
    "ta-lib>=0.4.28",
    "pandas-ta>=0.3.14b",
    
    # AI/ML
    "openai>=1.3.8",
    "anthropic>=0.7.8",
    "scikit-learn>=1.3.2",
    
    # MCP
    "mcp>=1.0.0",
    
    # Utilities
    "python-dotenv>=1.0.0",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "structlog>=23.2.0",
    "click>=8.1.7",
    
    # Monitoring
    "prometheus-client>=0.19.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "black>=23.11.0",
    "isort>=5.12.0",
    "mypy>=1.7.1",
    "flake8>=6.1.0",
    "pre-commit>=3.6.0",
]

docs = [
    "mkdocs>=1.5.3",
    "mkdocs-material>=9.4.14",
    "mkdocs-swagger-ui-tag>=0.6.8",
]

[project.urls]
Homepage = "https://github.com/investment-mcp/investment-mcp"
Documentation = "https://docs.investment-mcp.com"
Repository = "https://github.com/investment-mcp/investment-mcp.git"
Issues = "https://github.com/investment-mcp/investment-mcp/issues"

[project.scripts]
investment-mcp = "src.cli:main"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["src"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "yfinance.*",
    "ta.*",
    "pandas_ta.*",
    "quantlib.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]